module Solve where

    solve a b | mod a 2 == mod b 2 = same a b
              | mod a 2 /= mod b 2 = diff a b
    
    getN n | n == 0 = "0"
           | otherwise = (getN (n - 1))++"'"
    
    split [] _ = [""]
    split (a:cs) c | a == c = "" : rest
                   | otherwise = (a : head rest) : tail rest
                   where
                        rest = split (cs) c
    
    swapAB a b = ["@c.@b.@a.((a=b)->(a=c)->(b=c))->@b.@a.((a=b)->(a="++a++")->(b="++a++"))",
                "@b.@a.((a=b)->(a="++a++")->(b="++a++"))",
                "@b.@a.((a=b)->(a="++a++")->(b="++a++"))->@a.((a="++b++")->(a="++a++")->("++b++"="++a++"))",
                "@a.((a="++b++")->(a="++a++")->("++b++"="++a++"))",
                "@a.((a="++b++")->(a="++a++")->("++b++"="++a++"))->(("++a++"="++b++")->("++a++"="++a++")->("++b++"="++a++"))",
                "("++a++"="++b++")->("++a++"="++a++")->("++b++"="++a++")",
                "("++a++"="++a++")->("++b++"="++a++")",
                "@a.(a+0=a)->("++a++"+0="++a++")",
                a++"+0="++a,
                "@c.@b.@a.((a=b)->(a=c)->(b=c))->@b.@a.((a=b)->(a="++a++")->(b="++a++"))",
                "@b.@a.((a=b)->(a="++a++")->(b="++a++"))",
                "@b.@a.((a=b)->(a="++a++")->(b="++a++"))->@a.((a="++a++")->(a="++a++")->("++a++"="++a++"))",
                "@a.((a="++a++")->(a="++a++")->("++a++"="++a++"))",
                "@a.((a="++a++")->(a="++a++")->("++a++"="++a++"))->(("++a++"+0="++a++")->("++a++"+0="++a++")->("++a++"="++a++"))",
                "("++a++"+0="++a++")->("++a++"+0="++a++")->("++a++"="++a++")",
                "("++a++"+0="++a++")->("++a++"="++a++")",
                a++"="++a,
                b++"="++a]
    
    swap s = swapAB (head (split s '=')) (last (split s '='))
    
    secondImpl a b c = 
        [
        "@c.@b.@a.((a=b)->(a=c)->(b=c))->@b.@a.((a=b)->(a="++c++")->(b="++c++"))",
        "@b.@a.((a=b)->(a="++c++")->(b="++c++"))",
        "@b.@a.((a=b)->(a="++c++")->(b="++c++"))->@a.((a="++b++")->(a="++c++")->("++b++"="++c++"))",
        "@a.((a="++b++")->(a="++c++")->("++b++"="++c++"))",
        "@a.((a="++b++")->(a="++c++")->("++b++"="++c++"))->(("++a++"="++b++")->("++a++"="++c++")->("++b++"="++c++"))",
        "("++a++"="++b++")->("++a++"="++c++")->("++b++"="++c++")" 
        ]
    
    aInqAOne s = [
            "@b.@a.((a+b')=(a+b)')->@a.(a+0'=(a+0)')",
            "@a.(a+0'=(a+0)')",
            "@a.(a+0'=(a+0)')->("++s++"+0'=("++s++"+0)')",
            s++"+0'=("++s++"+0)'"] 
            ++
            (swapAB ("("++s++"+0')") ("("++s++"+0)'")) 
            ++
            ["@a.(a+0=a)->("++s++"+0="++s++")",
            s++"+0="++s,
            "@b.@a.((a=b)->(a'=b'))->@a.((a="++s++")->(a'="++s++"'))",
            "@a.((a="++s++")->(a'="++s++"'))",
            "@a.((a="++s++")->(a'="++s++"'))->(("++s++"+0="++s++")->(("++s++"+0)'="++s++"'))",
            "("++s++"+0="++s++")->(("++s++"+0)'="++s++"')",
            "("++s++"+0)'="++s++"'"]
            ++
            secondImpl ("("++s++"+0)'") (s++"'") (s++"+0'") 
            ++
            ["(("++s++"+0)'="++s++"+0')->("++s++"'="++s++"+0')",
            s++"'="++s++"+0'"
            ]
    
    same :: Int -> Int -> [String]
    same x y | mod x 2 == 0 = do
                let s1 = getTwoEq x 0
                let s2 = getTwoEq y 0
                let le = ("("++(last s1)++")")
                let re = ("("++(last s2)++")")
                getProof (s1++s2) le re x y (div x 2) (div y 2)
             | otherwise = do
                let p = div (x + 1) 2
                let q = div (y + 1) 2
                let s1 = getTwoEq (x + 1) 0
    
                let r1 = (s1 ++ (swap (last s1)) ++ (aInqAOne (getN x)) ++ (secondImpl (getN (x + 1)) ((getN 2)++"*"++(getN p)) ((getN x)++"+0'")) ++ [("("++getN(x + 1)++"="++getN(x)++"+0')->(0''*"++getN(p)++"="++getN(x)++"+0')")] ++ [("0''*"++getN(p)++"="++getN(x)++"+0'")])
    
                let s2 = getTwoEq (y + 1) 0
    
                let r2 = (s2 ++ (swap (last s2)) ++ (aInqAOne (getN y)) ++ (secondImpl (getN (y + 1)) ((getN 2)++"*"++(getN q)) ((getN y)++"+0'")) ++ [("("++getN(y + 1)++"="++getN(y)++"+0')->(0''*"++getN(q)++"="++getN(y)++"+0')")] ++ [("0''*"++getN(q)++"="++getN(y)++"+0'")])
                
                let le = ("(0''*"++(getN p)++"="++(getN x)++"+0')")
                let re = ("(0''*"++(getN q)++"="++(getN y)++"+0')")
    
                getProof (r1++r2) le re x y p q
    
    --          x y p q
    
    fullPattern :: String -> String -> String -> String -> String
    fullPattern a b c d = "((0''*"++c++"="++a++")&(0''*"++d++"="++b++"))|((0''*"++c++"="++a++"+0')&(0''*"++d++"="++b++"+0'))"
    fullWithoutPQ x y = fullPattern (getN x) (getN y) "p" "q";
    fullWithoutQ x y p = fullPattern (getN x) (getN y) (getN p) "q";
    full x y p q = fullPattern (getN x) (getN y) (getN p) (getN q)
    
    getProof :: [String] -> String -> String -> Int -> Int -> Int -> Int -> [String]
    getProof r le re x y p q = 
            r ++ 
            [
            le++"->"++re++"->"++le++"&"++re,
            re++"->"++le++"&"++re,
            le++"&"++re,
            le++"&"++re++"->"++(full x y p q),
            (full x y p q),
            (full x y p q)++"->?q.("++(fullWithoutQ x y p)++")",
            "?q.("++(fullWithoutQ x y p)++")",
            "?q.("++(fullWithoutQ x y p)++")->?p.?q.("++(fullWithoutPQ x y)++")",
            "?p.?q.("++(fullWithoutPQ x y)++")"
            ]
    
    getTwoEq :: Int -> Int -> [String]
    getTwoEq x k | k == x + 2 = []
                 | otherwise = getTwoEqHelper1 ++ [("0''*"++half++"="++full)] ++ getTwoEqHelper2 ++ (getTwoEq x (k + 2))
    
                 where
                    full = getN(k)
                    half = getN(div k 2)
    
                    getTwoEqHelper2 | k == x = []
                                    | otherwise = 
                                        [("@b.@a.((a=b)->(a'=b'))->@a.((a="++full++")->(a'="++full++"'))"),
                                        ("@a.((a="++full++")->(a'="++full++"'))"),
                                        ("@a.((a="++full++")->(a'="++full++"'))->((0''*"++half++"="++full++")->((0''*"++half++")'="++full++"'))"),
                                        ("(0''*"++half++"="++full++")->((0''*"++half++")'="++full++"')"),
                                        ("(0''*"++half++")'="++full++"'"),
                                        ("@b.@a.((a=b)->(a'=b'))->@a.((a="++full++"')->(a'="++full++"''))"),
                                        ("@a.((a="++full++"')->(a'="++full++"''))"),
                                        ("@a.((a="++full++"')->(a'="++full++"''))->(((0''*"++half++")'="++full++"')->((0''*"++half++")''="++full++"''))"),
                                        ("((0''*"++half++")'="++full++"')->((0''*"++half++")''="++full++"'')"),
                                        ("(0''*"++half++")''="++full++"''")]
    
                    getTwoEqHelper1 | k /= 0 = 
                        add1 (full) (half) (getN (div (k - 2) 2))
                                    | otherwise = [("@a.(a*0=0)->(0''*0=0)")]
                 
                    add1 full half s = ["@a.(a+0=a)->(0''*"++s++"+0=0''*"++s++")",
                        "0''*"++s++"+0=0''*"++s,
                        "@b.@a.((a=b)->(a'=b'))->@a.((a=0''*"++s++")->(a'=(0''*"++s++")'))",
                        "@a.((a=0''*"++s++")->(a'=(0''*"++s++")'))",
                        "@a.((a=0''*"++s++")->(a'=(0''*"++s++")'))->("++"(0''*"++s++"+0=0''*"++s++")->((0''*"++s++"+0)'=(0''*"++s++")'))",
                        "(0''*"++s++"+0=0''*"++s++")->((0''*"++s++"+0)'=(0''*"++s++")')",
                        "(0''*"++s++"+0)'=(0''*"++s++")'",
                        "@b.@a.((a+b')=(a+b)')->@a.(a+0'=(a+0)')",
                        "@a.(a+0'=(a+0)')",
                        "@a.(a+0'=(a+0)')->(0''*"++s++"+0'=(0''*"++s++"+0)')",
                        "0''*"++s++"+0'=(0''*"++s++"+0)'"] ++ 
                        (swapAB ("(0''*"++s++"+0')") ("((0''*"++s++"+0)')"))++
                        (secondImpl ("(0''*"++s++"+0)'") ("0''*"++s++"+0'") ("(0''*"++s++")'"))++ 
                        ["((0''*"++s++"+0)'=(0''*"++s++")')->(0''*"++s++"+0'=(0''*"++s++")')",
                        "0''*"++s++"+0'=(0''*"++s++")'",
                        "@b.@a.((a=b)->(a'=b'))->@a.((a=(0''*"++s++")')->(a'=(0''*"++s++")''))",
                        "@a.((a=(0''*"++s++")')->(a'=(0''*"++s++")''))",
                        "@a.((a=(0''*"++s++")')->(a'=(0''*"++s++")''))->((0''*"++s++"+0'=(0''*"++s++")')->((0''*"++s++"+0')'=(0''*"++s++")''))",
                        "(0''*"++s++"+0'=(0''*"++s++")')->((0''*"++s++"+0')'=(0''*"++s++")'')",
                        "(0''*"++s++"+0')'=(0''*"++s++")''",
                        "@b.@a.((a+b')=(a+b)')->@a.(a+0''=(a+0')')",
                        "@a.(a+0''=(a+0')')",
                        "@a.(a+0''=(a+0')')->(0''*"++s++"+0''=(0''*"++s++"+0')')",
                        "0''*"++s++"+0''=(0''*"++s++"+0')'"] ++ 
                        (swapAB ("(0''*"++s++"+0'')") ("((0''*"++s++"+0')')"))++
                        (secondImpl ("(0''*"++s++"+0')'") ("0''*"++s++"+0''") ("(0''*"++s++")''"))++
                        ["((0''*"++s++"+0')'=(0''*"++s++")'')->(0''*"++s++"+0''=(0''*"++s++")'')",
                        "0''*"++s++"+0''=(0''*"++s++")''",
                        "@b.@a.((a*b')=((a*b)+a))->@a.(a*"++half++"=a*"++s++"+a)",
                        "@a.(a*"++half++"=a*"++s++"+a)",
                        "@a.(a*"++half++"=a*"++s++"+a)->(0''*"++half++"=0''*"++s++"+0'')",
                        "0''*"++half++"=0''*"++s++"+0''"]++
                        (swapAB ("(0''*"++half++")") ("(0''*"++s++"+0'')"))++
                        (secondImpl ("0''*"++s++"+0''") ("(0''*"++s++")''") ("0''*"++half))++
                        ["(0''*"++s++"+0''=0''*"++half++")->((0''*"++s++")''=0''*"++half++")",
                        "(0''*"++s++")''=0''*"++half]++
                        (secondImpl ("(0''*"++s++")''") ("0''*"++half) full)++
                        ["((0''*"++s++")''="++full++")->(0''*"++half++"="++full++")"]
    
    
    diff x y | mod x 2 == 1 = diffHelper x y x (y + 1) "p" "q"
             | otherwise = diffHelper x y y (x + 1) "q" "p"
    
    disLemma a b = 
        ["!("++a++")",
        "!("++b++")",
        "((("++a++")|("++b++"))->("++a++"))->(((("++a++")|("++b++"))->!("++a++"))->!(("++a++")|("++b++")))",
        "!("++a++")->((("++a++")|("++b++"))->!("++a++"))",
        "(("++a++")|("++b++"))->!("++a++")",
        "!("++a++")",
        "(!("++a++")->((("++a++")|("++b++"))->!("++a++")))",
        "((("++a++")|("++b++"))->!("++a++"))",
        "!("++b++")",
        "(!("++b++")->((("++a++")|("++b++"))->!("++b++")))",
        "((("++a++")|("++b++"))->!("++b++"))",
        "((("++a++")|("++b++"))->((("++a++")|("++b++"))->(("++a++")|("++b++"))))",
        "((("++a++")|("++b++"))->(((("++a++")|("++b++"))->(("++a++")|("++b++")))->(("++a++")|("++b++"))))",
        "(((("++a++")|("++b++"))->((("++a++")|("++b++"))->(("++a++")|("++b++"))))->(((("++a++")|("++b++"))->(((("++a++")|("++b++"))->(("++a++")|("++b++")))->(("++a++")|("++b++"))))->((("++a++")|("++b++"))->(("++a++")|("++b++")))))",
        "(((("++a++")|("++b++"))->(((("++a++")|("++b++"))->(("++a++")|("++b++")))->(("++a++")|("++b++"))))->((("++a++")|("++b++"))->(("++a++")|("++b++"))))",
        "((("++a++")|("++b++"))->(("++a++")|("++b++")))",
        "(("++a++")->(("++a++")->("++a++")))",
        "((("++a++")->(("++a++")->("++a++")))->((("++a++")|("++b++"))->(("++a++")->(("++a++")->("++a++")))))",
        "((("++a++")|("++b++"))->(("++a++")->(("++a++")->("++a++"))))",
        "((("++a++")->(("++a++")->("++a++")))->((("++a++")->((("++a++")->("++a++"))->("++a++")))->(("++a++")->("++a++"))))",
        "(((("++a++")->(("++a++")->("++a++")))->((("++a++")->((("++a++")->("++a++"))->("++a++")))->(("++a++")->("++a++"))))->((("++a++")|("++b++"))->((("++a++")->(("++a++")->("++a++")))->((("++a++")->((("++a++")->("++a++"))->("++a++")))->(("++a++")->("++a++"))))))",
        "((("++a++")|("++b++"))->((("++a++")->(("++a++")->("++a++")))->((("++a++")->((("++a++")->("++a++"))->("++a++")))->(("++a++")->("++a++")))))",
        "(("++a++")->((("++a++")->("++a++"))->("++a++")))",
        "((("++a++")->((("++a++")->("++a++"))->("++a++")))->((("++a++")|("++b++"))->(("++a++")->((("++a++")->("++a++"))->("++a++")))))",
        "((("++a++")|("++b++"))->(("++a++")->((("++a++")->("++a++"))->("++a++"))))",
        "(((("++a++")|("++b++"))->(("++a++")->(("++a++")->("++a++"))))->(((("++a++")|("++b++"))->((("++a++")->(("++a++")->("++a++")))->((("++a++")->((("++a++")->("++a++"))->("++a++")))->(("++a++")->("++a++")))))->((("++a++")|("++b++"))->((("++a++")->((("++a++")->("++a++"))->("++a++")))->(("++a++")->("++a++"))))))",
        "(((("++a++")|("++b++"))->((("++a++")->(("++a++")->("++a++")))->((("++a++")->((("++a++")->("++a++"))->("++a++")))->(("++a++")->("++a++")))))->((("++a++")|("++b++"))->((("++a++")->((("++a++")->("++a++"))->("++a++")))->(("++a++")->("++a++")))))",
        "((("++a++")|("++b++"))->((("++a++")->((("++a++")->("++a++"))->("++a++")))->(("++a++")->("++a++"))))",
        "(((("++a++")|("++b++"))->(("++a++")->((("++a++")->("++a++"))->("++a++"))))->(((("++a++")|("++b++"))->((("++a++")->((("++a++")->("++a++"))->("++a++")))->(("++a++")->("++a++"))))->((("++a++")|("++b++"))->(("++a++")->("++a++")))))",
        "(((("++a++")|("++b++"))->((("++a++")->((("++a++")->("++a++"))->("++a++")))->(("++a++")->("++a++"))))->((("++a++")|("++b++"))->(("++a++")->("++a++"))))",
        "((("++a++")|("++b++"))->(("++a++")->("++a++")))",
        "!("++b++")",
        "(!("++b++")->((("++a++")|("++b++"))->!("++b++")))",
        "((("++a++")|("++b++"))->!("++b++"))",
        "(!("++b++")->(("++b++")->!("++b++")))",
        "((!("++b++")->(("++b++")->!("++b++")))->((("++a++")|("++b++"))->(!("++b++")->(("++b++")->!("++b++")))))",
        "((("++a++")|("++b++"))->(!("++b++")->(("++b++")->!("++b++"))))",
        "(((("++a++")|("++b++"))->!("++b++"))->(((("++a++")|("++b++"))->(!("++b++")->(("++b++")->!("++b++"))))->((("++a++")|("++b++"))->(("++b++")->!("++b++")))))",
        "(((("++a++")|("++b++"))->(!("++b++")->(("++b++")->!("++b++"))))->((("++a++")|("++b++"))->(("++b++")->!("++b++"))))",
        "((("++a++")|("++b++"))->(("++b++")->!("++b++")))",
        "!("++a++")",
        "(!("++a++")->((("++a++")|("++b++"))->!("++a++")))",
        "((("++a++")|("++b++"))->!("++a++"))",
        "(!("++a++")->(("++b++")->!("++a++")))",
        "((!("++a++")->(("++b++")->!("++a++")))->((("++a++")|("++b++"))->(!("++a++")->(("++b++")->!("++a++")))))",
        "((("++a++")|("++b++"))->(!("++a++")->(("++b++")->!("++a++"))))",
        "(((("++a++")|("++b++"))->!("++a++"))->(((("++a++")|("++b++"))->(!("++a++")->(("++b++")->!("++a++"))))->((("++a++")|("++b++"))->(("++b++")->!("++a++")))))",
        "(((("++a++")|("++b++"))->(!("++a++")->(("++b++")->!("++a++"))))->((("++a++")|("++b++"))->(("++b++")->!("++a++"))))",
        "((("++a++")|("++b++"))->(("++b++")->!("++a++")))",
        "(("++b++")->(("++b++")->("++b++")))",
        "((("++b++")->(("++b++")->("++b++")))->((("++a++")|("++b++"))->(("++b++")->(("++b++")->("++b++")))))",
        "((("++a++")|("++b++"))->(("++b++")->(("++b++")->("++b++"))))",
        "(("++b++")->((("++b++")->("++b++"))->("++b++")))",
        "((("++b++")->((("++b++")->("++b++"))->("++b++")))->((("++a++")|("++b++"))->(("++b++")->((("++b++")->("++b++"))->("++b++")))))",
        "((("++a++")|("++b++"))->(("++b++")->((("++b++")->("++b++"))->("++b++"))))",
        "((("++b++")->(("++b++")->("++b++")))->((("++b++")->((("++b++")->("++b++"))->("++b++")))->(("++b++")->("++b++"))))",
        "(((("++b++")->(("++b++")->("++b++")))->((("++b++")->((("++b++")->("++b++"))->("++b++")))->(("++b++")->("++b++"))))->((("++a++")|("++b++"))->((("++b++")->(("++b++")->("++b++")))->((("++b++")->((("++b++")->("++b++"))->("++b++")))->(("++b++")->("++b++"))))))",
        "((("++a++")|("++b++"))->((("++b++")->(("++b++")->("++b++")))->((("++b++")->((("++b++")->("++b++"))->("++b++")))->(("++b++")->("++b++")))))",
        "(((("++a++")|("++b++"))->(("++b++")->(("++b++")->("++b++"))))->(((("++a++")|("++b++"))->((("++b++")->(("++b++")->("++b++")))->((("++b++")->((("++b++")->("++b++"))->("++b++")))->(("++b++")->("++b++")))))->((("++a++")|("++b++"))->((("++b++")->((("++b++")->("++b++"))->("++b++")))->(("++b++")->("++b++"))))))",
        "(((("++a++")|("++b++"))->((("++b++")->(("++b++")->("++b++")))->((("++b++")->((("++b++")->("++b++"))->("++b++")))->(("++b++")->("++b++")))))->((("++a++")|("++b++"))->((("++b++")->((("++b++")->("++b++"))->("++b++")))->(("++b++")->("++b++")))))",
        "((("++a++")|("++b++"))->((("++b++")->((("++b++")->("++b++"))->("++b++")))->(("++b++")->("++b++"))))",
        "(((("++a++")|("++b++"))->(("++b++")->((("++b++")->("++b++"))->("++b++"))))->(((("++a++")|("++b++"))->((("++b++")->((("++b++")->("++b++"))->("++b++")))->(("++b++")->("++b++"))))->((("++a++")|("++b++"))->(("++b++")->("++b++")))))",
        "(((("++a++")|("++b++"))->((("++b++")->((("++b++")->("++b++"))->("++b++")))->(("++b++")->("++b++"))))->((("++a++")|("++b++"))->(("++b++")->("++b++"))))",
        "((("++a++")|("++b++"))->(("++b++")->("++b++")))",
        "((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++")))",
        "(((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++")))->((("++a++")|("++b++"))->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++")))))",
        "((("++a++")|("++b++"))->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++"))))",
        "(((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++")))->(("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++")))))",
        "((((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++")))->(("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++")))))->((("++a++")|("++b++"))->(((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++")))->(("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++")))))))",
        "((("++a++")|("++b++"))->(((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++")))->(("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++"))))))",
        "(((("++a++")|("++b++"))->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++"))))->(((("++a++")|("++b++"))->(((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++")))->(("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++"))))))->((("++a++")|("++b++"))->(("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++")))))))",
        "(((("++a++")|("++b++"))->(((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++")))->(("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++"))))))->((("++a++")|("++b++"))->(("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++"))))))",
        "((("++a++")|("++b++"))->(("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++")))))",
        "(("++b++")->(!("++a++")->("++b++")))",
        "((("++b++")->(!("++a++")->("++b++")))->((("++a++")|("++b++"))->(("++b++")->(!("++a++")->("++b++")))))",
        "((("++a++")|("++b++"))->(("++b++")->(!("++a++")->("++b++"))))",
        "((("++b++")->(!("++a++")->("++b++")))->(("++b++")->(("++b++")->(!("++a++")->("++b++")))))",
        "(((("++b++")->(!("++a++")->("++b++")))->(("++b++")->(("++b++")->(!("++a++")->("++b++")))))->((("++a++")|("++b++"))->((("++b++")->(!("++a++")->("++b++")))->(("++b++")->(("++b++")->(!("++a++")->("++b++")))))))",
        "((("++a++")|("++b++"))->((("++b++")->(!("++a++")->("++b++")))->(("++b++")->(("++b++")->(!("++a++")->("++b++"))))))",
        "(((("++a++")|("++b++"))->(("++b++")->(!("++a++")->("++b++"))))->(((("++a++")|("++b++"))->((("++b++")->(!("++a++")->("++b++")))->(("++b++")->(("++b++")->(!("++a++")->("++b++"))))))->((("++a++")|("++b++"))->(("++b++")->(("++b++")->(!("++a++")->("++b++")))))))",
        "(((("++a++")|("++b++"))->((("++b++")->(!("++a++")->("++b++")))->(("++b++")->(("++b++")->(!("++a++")->("++b++"))))))->((("++a++")|("++b++"))->(("++b++")->(("++b++")->(!("++a++")->("++b++"))))))",
        "((("++a++")|("++b++"))->(("++b++")->(("++b++")->(!("++a++")->("++b++")))))",
        "((("++b++")->("++b++"))->((("++b++")->(("++b++")->(!("++a++")->("++b++"))))->(("++b++")->(!("++a++")->("++b++")))))",
        "(((("++b++")->("++b++"))->((("++b++")->(("++b++")->(!("++a++")->("++b++"))))->(("++b++")->(!("++a++")->("++b++")))))->((("++a++")|("++b++"))->((("++b++")->("++b++"))->((("++b++")->(("++b++")->(!("++a++")->("++b++"))))->(("++b++")->(!("++a++")->("++b++")))))))",
        "((("++a++")|("++b++"))->((("++b++")->("++b++"))->((("++b++")->(("++b++")->(!("++a++")->("++b++"))))->(("++b++")->(!("++a++")->("++b++"))))))",
        "(((("++a++")|("++b++"))->(("++b++")->("++b++")))->(((("++a++")|("++b++"))->((("++b++")->("++b++"))->((("++b++")->(("++b++")->(!("++a++")->("++b++"))))->(("++b++")->(!("++a++")->("++b++"))))))->((("++a++")|("++b++"))->((("++b++")->(("++b++")->(!("++a++")->("++b++"))))->(("++b++")->(!("++a++")->("++b++")))))))",
        "(((("++a++")|("++b++"))->((("++b++")->("++b++"))->((("++b++")->(("++b++")->(!("++a++")->("++b++"))))->(("++b++")->(!("++a++")->("++b++"))))))->((("++a++")|("++b++"))->((("++b++")->(("++b++")->(!("++a++")->("++b++"))))->(("++b++")->(!("++a++")->("++b++"))))))",
        "((("++a++")|("++b++"))->((("++b++")->(("++b++")->(!("++a++")->("++b++"))))->(("++b++")->(!("++a++")->("++b++")))))",
        "(("++b++")->(!("++a++")->("++b++")))",
        "((("++b++")->(!("++a++")->("++b++")))->((("++a++")|("++b++"))->(("++b++")->(!("++a++")->("++b++")))))",
        "((("++a++")|("++b++"))->(("++b++")->(!("++a++")->("++b++"))))",
        "(!("++b++")->(!("++a++")->!("++b++")))",
        "((!("++b++")->(!("++a++")->!("++b++")))->((("++a++")|("++b++"))->(!("++b++")->(!("++a++")->!("++b++")))))",
        "((("++a++")|("++b++"))->(!("++b++")->(!("++a++")->!("++b++"))))",
        "((!("++b++")->(!("++a++")->!("++b++")))->(("++b++")->(!("++b++")->(!("++a++")->!("++b++")))))",
        "(((!("++b++")->(!("++a++")->!("++b++")))->(("++b++")->(!("++b++")->(!("++a++")->!("++b++")))))->((("++a++")|("++b++"))->((!("++b++")->(!("++a++")->!("++b++")))->(("++b++")->(!("++b++")->(!("++a++")->!("++b++")))))))",
        "((("++a++")|("++b++"))->((!("++b++")->(!("++a++")->!("++b++")))->(("++b++")->(!("++b++")->(!("++a++")->!("++b++"))))))",
        "(((("++a++")|("++b++"))->(!("++b++")->(!("++a++")->!("++b++"))))->(((("++a++")|("++b++"))->((!("++b++")->(!("++a++")->!("++b++")))->(("++b++")->(!("++b++")->(!("++a++")->!("++b++"))))))->((("++a++")|("++b++"))->(("++b++")->(!("++b++")->(!("++a++")->!("++b++")))))))",
        "(((("++a++")|("++b++"))->((!("++b++")->(!("++a++")->!("++b++")))->(("++b++")->(!("++b++")->(!("++a++")->!("++b++"))))))->((("++a++")|("++b++"))->(("++b++")->(!("++b++")->(!("++a++")->!("++b++"))))))",
        "((("++a++")|("++b++"))->(("++b++")->(!("++b++")->(!("++a++")->!("++b++")))))",
        "((("++b++")->!("++b++"))->((("++b++")->(!("++b++")->(!("++a++")->!("++b++"))))->(("++b++")->(!("++a++")->!("++b++")))))",
        "(((("++b++")->!("++b++"))->((("++b++")->(!("++b++")->(!("++a++")->!("++b++"))))->(("++b++")->(!("++a++")->!("++b++")))))->((("++a++")|("++b++"))->((("++b++")->!("++b++"))->((("++b++")->(!("++b++")->(!("++a++")->!("++b++"))))->(("++b++")->(!("++a++")->!("++b++")))))))",
        "((("++a++")|("++b++"))->((("++b++")->!("++b++"))->((("++b++")->(!("++b++")->(!("++a++")->!("++b++"))))->(("++b++")->(!("++a++")->!("++b++"))))))",
        "(((("++a++")|("++b++"))->(("++b++")->!("++b++")))->(((("++a++")|("++b++"))->((("++b++")->!("++b++"))->((("++b++")->(!("++b++")->(!("++a++")->!("++b++"))))->(("++b++")->(!("++a++")->!("++b++"))))))->((("++a++")|("++b++"))->((("++b++")->(!("++b++")->(!("++a++")->!("++b++"))))->(("++b++")->(!("++a++")->!("++b++")))))))",
        "(((("++a++")|("++b++"))->((("++b++")->!("++b++"))->((("++b++")->(!("++b++")->(!("++a++")->!("++b++"))))->(("++b++")->(!("++a++")->!("++b++"))))))->((("++a++")|("++b++"))->((("++b++")->(!("++b++")->(!("++a++")->!("++b++"))))->(("++b++")->(!("++a++")->!("++b++"))))))",
        "((("++a++")|("++b++"))->((("++b++")->(!("++b++")->(!("++a++")->!("++b++"))))->(("++b++")->(!("++a++")->!("++b++")))))",
        "(((("++a++")|("++b++"))->(("++b++")->(!("++b++")->(!("++a++")->!("++b++")))))->(((("++a++")|("++b++"))->((("++b++")->(!("++b++")->(!("++a++")->!("++b++"))))->(("++b++")->(!("++a++")->!("++b++")))))->((("++a++")|("++b++"))->(("++b++")->(!("++a++")->!("++b++"))))))",
        "(((("++a++")|("++b++"))->((("++b++")->(!("++b++")->(!("++a++")->!("++b++"))))->(("++b++")->(!("++a++")->!("++b++")))))->((("++a++")|("++b++"))->(("++b++")->(!("++a++")->!("++b++")))))",
        "((("++a++")|("++b++"))->(("++b++")->(!("++a++")->!("++b++"))))",
        "((("++b++")->(!("++a++")->("++b++")))->((("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++"))))->(("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))))",
        "(((("++b++")->(!("++a++")->("++b++")))->((("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++"))))->(("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))))->((("++a++")|("++b++"))->((("++b++")->(!("++a++")->("++b++")))->((("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++"))))->(("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))))))",
        "((("++a++")|("++b++"))->((("++b++")->(!("++a++")->("++b++")))->((("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++"))))->(("++b++")->((!("++a++")->!("++b++"))->!!("++a++"))))))",
        "(((("++a++")|("++b++"))->(("++b++")->(!("++a++")->("++b++"))))->(((("++a++")|("++b++"))->((("++b++")->(!("++a++")->("++b++")))->((("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++"))))->(("++b++")->((!("++a++")->!("++b++"))->!!("++a++"))))))->((("++a++")|("++b++"))->((("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++"))))->(("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))))))",
        "(((("++a++")|("++b++"))->((("++b++")->(!("++a++")->("++b++")))->((("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++"))))->(("++b++")->((!("++a++")->!("++b++"))->!!("++a++"))))))->((("++a++")|("++b++"))->((("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++"))))->(("++b++")->((!("++a++")->!("++b++"))->!!("++a++"))))))",
        "((("++a++")|("++b++"))->((("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++"))))->(("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))))",
        "(((("++a++")|("++b++"))->(("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++")))))->(((("++a++")|("++b++"))->((("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++"))))->(("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))))->((("++a++")|("++b++"))->(("++b++")->((!("++a++")->!("++b++"))->!!("++a++"))))))",
        "(((("++a++")|("++b++"))->((("++b++")->((!("++a++")->("++b++"))->((!("++a++")->!("++b++"))->!!("++a++"))))->(("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))))->((("++a++")|("++b++"))->(("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))))",
        "((("++a++")|("++b++"))->(("++b++")->((!("++a++")->!("++b++"))->!!("++a++"))))",
        "((("++b++")->(!("++a++")->!("++b++")))->((("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))->(("++b++")->!!("++a++"))))",
        "(((("++b++")->(!("++a++")->!("++b++")))->((("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))->(("++b++")->!!("++a++"))))->((("++a++")|("++b++"))->((("++b++")->(!("++a++")->!("++b++")))->((("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))->(("++b++")->!!("++a++"))))))",
        "((("++a++")|("++b++"))->((("++b++")->(!("++a++")->!("++b++")))->((("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))->(("++b++")->!!("++a++")))))",
        "(((("++a++")|("++b++"))->(("++b++")->(!("++a++")->!("++b++"))))->(((("++a++")|("++b++"))->((("++b++")->(!("++a++")->!("++b++")))->((("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))->(("++b++")->!!("++a++")))))->((("++a++")|("++b++"))->((("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))->(("++b++")->!!("++a++"))))))",
        "(((("++a++")|("++b++"))->((("++b++")->(!("++a++")->!("++b++")))->((("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))->(("++b++")->!!("++a++")))))->((("++a++")|("++b++"))->((("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))->(("++b++")->!!("++a++")))))",
        "((("++a++")|("++b++"))->((("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))->(("++b++")->!!("++a++"))))",
        "(((("++a++")|("++b++"))->(("++b++")->((!("++a++")->!("++b++"))->!!("++a++"))))->(((("++a++")|("++b++"))->((("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))->(("++b++")->!!("++a++"))))->((("++a++")|("++b++"))->(("++b++")->!!("++a++")))))",
        "(((("++a++")|("++b++"))->((("++b++")->((!("++a++")->!("++b++"))->!!("++a++")))->(("++b++")->!!("++a++"))))->((("++a++")|("++b++"))->(("++b++")->!!("++a++"))))",
        "((("++a++")|("++b++"))->(("++b++")->!!("++a++")))",
        "(!!("++a++")->("++a++"))",
        "((!!("++a++")->("++a++"))->((("++a++")|("++b++"))->(!!("++a++")->("++a++"))))",
        "((("++a++")|("++b++"))->(!!("++a++")->("++a++")))",
        "((!!("++a++")->("++a++"))->(("++b++")->(!!("++a++")->("++a++"))))",
        "(((!!("++a++")->("++a++"))->(("++b++")->(!!("++a++")->("++a++"))))->((("++a++")|("++b++"))->((!!("++a++")->("++a++"))->(("++b++")->(!!("++a++")->("++a++"))))))",
        "((("++a++")|("++b++"))->((!!("++a++")->("++a++"))->(("++b++")->(!!("++a++")->("++a++")))))",
        "(((("++a++")|("++b++"))->(!!("++a++")->("++a++")))->(((("++a++")|("++b++"))->((!!("++a++")->("++a++"))->(("++b++")->(!!("++a++")->("++a++")))))->((("++a++")|("++b++"))->(("++b++")->(!!("++a++")->("++a++"))))))",
        "(((("++a++")|("++b++"))->((!!("++a++")->("++a++"))->(("++b++")->(!!("++a++")->("++a++")))))->((("++a++")|("++b++"))->(("++b++")->(!!("++a++")->("++a++")))))",
        "((("++a++")|("++b++"))->(("++b++")->(!!("++a++")->("++a++"))))",
        "((("++b++")->!!("++a++"))->((("++b++")->(!!("++a++")->("++a++")))->(("++b++")->("++a++"))))",
        "(((("++b++")->!!("++a++"))->((("++b++")->(!!("++a++")->("++a++")))->(("++b++")->("++a++"))))->((("++a++")|("++b++"))->((("++b++")->!!("++a++"))->((("++b++")->(!!("++a++")->("++a++")))->(("++b++")->("++a++"))))))",
        "((("++a++")|("++b++"))->((("++b++")->!!("++a++"))->((("++b++")->(!!("++a++")->("++a++")))->(("++b++")->("++a++")))))",
        "(((("++a++")|("++b++"))->(("++b++")->!!("++a++")))->(((("++a++")|("++b++"))->((("++b++")->!!("++a++"))->((("++b++")->(!!("++a++")->("++a++")))->(("++b++")->("++a++")))))->((("++a++")|("++b++"))->((("++b++")->(!!("++a++")->("++a++")))->(("++b++")->("++a++"))))))",
        "(((("++a++")|("++b++"))->((("++b++")->!!("++a++"))->((("++b++")->(!!("++a++")->("++a++")))->(("++b++")->("++a++")))))->((("++a++")|("++b++"))->((("++b++")->(!!("++a++")->("++a++")))->(("++b++")->("++a++")))))",
        "((("++a++")|("++b++"))->((("++b++")->(!!("++a++")->("++a++")))->(("++b++")->("++a++"))))",
        "(((("++a++")|("++b++"))->(("++b++")->(!!("++a++")->("++a++"))))->(((("++a++")|("++b++"))->((("++b++")->(!!("++a++")->("++a++")))->(("++b++")->("++a++"))))->((("++a++")|("++b++"))->(("++b++")->("++a++")))))",
        "(((("++a++")|("++b++"))->((("++b++")->(!!("++a++")->("++a++")))->(("++b++")->("++a++"))))->((("++a++")|("++b++"))->(("++b++")->("++a++"))))",
        "((("++a++")|("++b++"))->(("++b++")->("++a++")))",
        "((("++a++")->("++a++"))->((("++b++")->("++a++"))->((("++a++")|("++b++"))->("++a++"))))",
        "(((("++a++")->("++a++"))->((("++b++")->("++a++"))->((("++a++")|("++b++"))->("++a++"))))->((("++a++")|("++b++"))->((("++a++")->("++a++"))->((("++b++")->("++a++"))->((("++a++")|("++b++"))->("++a++"))))))",
        "((("++a++")|("++b++"))->((("++a++")->("++a++"))->((("++b++")->("++a++"))->((("++a++")|("++b++"))->("++a++")))))",
        "(((("++a++")|("++b++"))->(("++a++")->("++a++")))->(((("++a++")|("++b++"))->((("++a++")->("++a++"))->((("++b++")->("++a++"))->((("++a++")|("++b++"))->("++a++")))))->((("++a++")|("++b++"))->((("++b++")->("++a++"))->((("++a++")|("++b++"))->("++a++"))))))",
        "(((("++a++")|("++b++"))->((("++a++")->("++a++"))->((("++b++")->("++a++"))->((("++a++")|("++b++"))->("++a++")))))->((("++a++")|("++b++"))->((("++b++")->("++a++"))->((("++a++")|("++b++"))->("++a++")))))",
        "((("++a++")|("++b++"))->((("++b++")->("++a++"))->((("++a++")|("++b++"))->("++a++"))))",
        "(((("++a++")|("++b++"))->(("++b++")->("++a++")))->(((("++a++")|("++b++"))->((("++b++")->("++a++"))->((("++a++")|("++b++"))->("++a++"))))->((("++a++")|("++b++"))->((("++a++")|("++b++"))->("++a++")))))",
        "(((("++a++")|("++b++"))->((("++b++")->("++a++"))->((("++a++")|("++b++"))->("++a++"))))->((("++a++")|("++b++"))->((("++a++")|("++b++"))->("++a++"))))",
        "((("++a++")|("++b++"))->((("++a++")|("++b++"))->("++a++")))",
        "(((("++a++")|("++b++"))->(("++a++")|("++b++")))->(((("++a++")|("++b++"))->((("++a++")|("++b++"))->("++a++")))->((("++a++")|("++b++"))->("++a++"))))",
        "(((("++a++")|("++b++"))->((("++a++")|("++b++"))->("++a++")))->((("++a++")|("++b++"))->("++a++")))",
        "((("++a++")|("++b++"))->("++a++"))",
        "((("++a++")|("++b++"))->!("++a++"))->!(("++a++")|("++b++"))",
        "!(("++a++")|("++b++"))"]
    
    diffHelper x y ln rn ll rl = do
        let left = getNotTwoEq ln ll
        let right = getNotTwoEq rn rl
    
        let firstLeftPart = ("((0''*p="++getN(x)++")&(0''*q="++getN(y)++"))")
        let secondLeftPart = ("(0''*"++ll++"="++getN(ln)++")")
    
        let tmp1 = (firstLeftPart++"->"++secondLeftPart) : (contr firstLeftPart secondLeftPart)
    
        let firstRightPart = ("((0''*p="++getN(x + 1)++")&(0''*q="++getN(y + 1)++"))")
        let secondRightPart = ("(0''*"++rl++"="++getN(rn)++")")
    
        let tmp2 = (firstRightPart++"->"++secondRightPart) : (contr firstRightPart secondRightPart)
    
        let tmp3 = left++tmp1++right++tmp2++(disLemma firstLeftPart firstRightPart)
    
        
        let formula = tail $ last (disLemma firstLeftPart firstRightPart)
    
        let tmp4 = (gen ("!"++formula) "p")++(mor formula "p")++[("!?p."++formula)]++(gen ("!?p."++formula) "q")++(mor ("?p."++formula) "q")++[("!?q.?p.("++formula++")")]
    
        tmp3++tmp4
    
    getNotTwoEq x c = getNotTwoEqImp x 1 c
    
    getNotTwoEqImp :: Int -> Int -> String -> [String]
    getNotTwoEqImp x k c | k == x + 2 = []
                         | otherwise = (getNotTwoEqImpHelper) where
                            getNotTwoEqImpHelper | k /= 1 = (getNotTwoEqImpHelperHelper1 (getN (k - 2)))++(getNotTwoEqImpHelperTail (getN k))++(getNotTwoEqImp x (k + 2) c)
                                                 | otherwise = [("@a.!(a'=0)->!((0''*"++c++")'=0)"), ("!((0''*"++c++")'=0)")]++(getNotTwoEqImpHelperTail (getN k))++(getNotTwoEqImp x (k + 2) c)
                            getNotTwoEqImpHelperHelper1 n = 
                                [("@b.@a.((a'=b')->(a=b))->@a.((a'="++n++"')->(a="++n++"))"),
                                ("@a.((a'="++n++"')->(a="++n++"))"),
                                ("@a.((a'="++n++"')->(a="++n++"))->(((0''*"++c++")'="++n++"')->((0''*"++c++")="++n++"))"),
                                ("((0''*"++c++")'="++n++"')->((0''*"++c++")="++n++")")]++
                                (contr ("((0''*"++c++")'="++n++"')") ("((0''*"++c++")="++n++")"))++
                                [("!((0''*"++c++")'="++n++"')")]
    
                            getNotTwoEqImpHelperTail n =
                                [("@b.@a.((a'=b')->(a=b))->@a.((a'="++n++")->(a="++(init n)++"))"),
                                ("@a.((a'="++n++")->(a="++(init n)++"))"),
                                ("@a.((a'="++n++")->(a="++(init n)++"))->(((0''*"++c++")''="++n++")->((0''*"++c++")'="++(init n)++"))"),
                                ("((0''*"++c++")''="++n++")->((0''*"++c++")'="++(init n)++")")]++
    
                                (contr ("((0''*"++c++")''="++n++")") ("((0''*"++c++")'="++(init n)++")"))++
                                
                                [("!((0''*"++c++")''="++n++")"),
                                ("@b.@a.((a+b')=(a+b)')->@a.(a+0''=(a+0')')"),
                                ("@a.(a+0''=(a+0')')"),
                                ("@a.(a+0''=(a+0')')->(0''*"++c++"+0''=(0''*"++c++"+0')')"),
                                ("0''*"++c++"+0''=(0''*"++c++"+0')'"),
                                ("@a.(a+0=a)->(0''*"++c++"+0''+0=0''*"++c++"+0'')"),
                                ("0''*"++c++"+0''+0=0''*"++c++"+0''")]++
    
                                (eq ("0''*"++c++"+0''"))++
    
                                (secondImpl ("0''*"++c++"+0''") ("(0''*"++c++"+0')'") ("0''*"++c++"+0''"))++
                                
                                [("(0''*"++c++"+0''=0''*"++c++"+0'')->((0''*"++c++"+0')'=0''*"++c++"+0'')"),
                                ("(0''*"++c++"+0')'=0''*"++c++"+0''"),
                                ("@b.@a.((a+b')=(a+b)')->@a.(a+0'=(a+0)')"),
                                ("@a.(a+0'=(a+0)')"),
                                ("@a.(a+0'=(a+0)')->(0''*"++c++"+0'=(0''*"++c++"+0)')"),
                                ("0''*"++c++"+0'=(0''*"++c++"+0)'"),
                                ("@a.(a+0=a)->(0''*"++c++"+0=0''*"++c++")"),
                                ("0''*"++c++"+0=0''*"++c),
                                ("@b.@a.((a=b)->(a'=b'))->@a.((a=0''*"++c++")->(a'=(0''*"++c++")'))"),
                                ("@a.((a=0''*"++c++")->(a'=(0''*"++c++")'))"),
                                ("@a.((a=0''*"++c++")->(a'=(0''*"++c++")'))->((0''*"++c++"+0=0''*"++c++")->((0''*"++c++"+0)'=(0''*"++c++")'))"),
                                ("(0''*"++c++"+0=0''*"++c++")->((0''*"++c++"+0)'=(0''*"++c++")')"),
                                ("(0''*"++c++"+0)'=(0''*"++c++")'"),
                                ("@a.(a+0=a)->(0''*"++c++"+0'+0=0''*"++c++"+0')"),
                                ("0''*"++c++"+0'+0=0''*"++c++"+0'")]++
    
                                (eq ("0''*"++c++"+0'"))++
    
                                (secondImpl ("0''*"++c++"+0'") ("(0''*"++c++"+0)'") ("0''*"++c++"+0'"))++
    
                                [("(0''*"++c++"+0'=0''*"++c++"+0')->((0''*"++c++"+0)'=0''*"++c++"+0')"),
                                ("(0''*"++c++"+0)'=0''*"++c++"+0'")]++
    
                                (secondImpl ("(0''*"++c++"+0)'") ("0''*"++c++"+0'") ("(0''*"++c++")'"))++
    
                                [("((0''*"++c++"+0)'=(0''*"++c++")')->(0''*"++c++"+0'=(0''*"++c++")')"),
                                ("0''*"++c++"+0'=(0''*"++c++")'"),
                                ("@b.@a.((a=b)->(a'=b'))->@a.((a=(0''*"++c++")')->(a'=(0''*"++c++")''))"),
                                ("@a.((a=(0''*"++c++")')->(a'=(0''*"++c++")''))"),
                                ("@a.((a=(0''*"++c++")')->(a'=(0''*"++c++")''))->((0''*"++c++"+0'=(0''*"++c++")')->((0''*"++c++"+0')'=(0''*"++c++")''))"),
                                ("(0''*"++c++"+0'=(0''*"++c++")')->((0''*"++c++"+0')'=(0''*"++c++")'')"),
                                ("(0''*"++c++"+0')'=(0''*"++c++")''")]++
                                
                                (secondImpl ("(0''*"++c++"+0')'") ("0''*"++c++"+0''") ("(0''*"++c++")''"))++
                                [("((0''*"++c++"+0')'=(0''*"++c++")'')->(0''*"++c++"+0''=(0''*"++c++")'')"),
                                ("0''*"++c++"+0''=(0''*"++c++")''")]++
                                
                                (secondImpl ("0''*"++c++"+0''") ("(0''*"++c++")''") n)++
    
                                [("(0''*"++c++"+0''="++n++")->((0''*"++c++")''="++n++")")]++
    
                                (contr ("(0''*"++c++"+0''="++n++")") ("((0''*"++c++")''="++n++")"))++
    
                                [("!(0''*"++c++"+0''="++n++")"),
                                ("!(0''*"++c++"+0''="++n++")->!((0''*"++c++")="++n++")->!(0''*"++c++"+0''="++n++")"),
                                ("!((0''*"++c++")="++n++")->!(0''*"++c++"+0''="++n++")"),
                                ("@b.@a.((a*b')=((a*b)+a))->@a.(a*"++c++"'=a*"++c++"+a)"),
                                ("@a.(a*"++c++"'=a*"++c++"+a)"),
                                ("@a.(a*"++c++"'=a*"++c++"+a)->(0''*"++c++"'=0''*"++c++"+0'')"),
                                ("0''*"++c++"'=0''*"++c++"+0''")]++
    
                                (secondImpl ("0''*"++c++"'") ("0''*"++c++"+0''") n)++
                            
                                [("(0''*"++c++"'="++n++")->(0''*"++c++"+0''="++n++")")]++
                                
                                (contr ("(0''*"++c++"'="++n++")") ("(0''*"++c++"+0''="++n++")"))++
    
                                [("(!(0''*"++c++"+0''="++n++")->!(0''*"++c++"'="++n++"))->(!(0''*"++c++"="++n++"))->(!(0''*"++c++"+0''="++n++")->!(0''*"++c++"'="++n++"))"),
                                ("(!(0''*"++c++"="++n++"))->(!(0''*"++c++"+0''="++n++")->!(0''*"++c++"'="++n++"))"),
                                ("((!(0''*"++c++"="++n++"))->!(0''*"++c++"+0''="++n++"))->((!(0''*"++c++"="++n++"))->(!(0''*"++c++"+0''="++n++")->!(0''*"++c++"'="++n++")))->((!(0''*"++c++"="++n++"))->!(0''*"++c++"'="++n++"))"),
                                ("((!(0''*"++c++"="++n++"))->(!(0''*"++c++"+0''="++n++")->!(0''*"++c++"'="++n++")))->((!(0''*"++c++"="++n++"))->!(0''*"++c++"'="++n++"))"),
                                ("((!(0''*"++c++"="++n++"))->!(0''*"++c++"'="++n++"))")]++
    
                                (gen ("(!((0''*"++c++")="++n++")->!(0''*"++c++"'="++n++"))") c)++
                                
                                (getNotNotZN (getN k))++
    
                                [("!(0''*0="++n++")->@"++c++".(!((0''*"++c++")="++n++")->!(0''*"++c++"'="++n++"))->((!(0''*0="++n++"))&(@"++c++".(!((0''*"++c++")="++n++")->!(0''*"++c++"'="++n++"))))"),
                                ("@"++c++".(!((0''*"++c++")="++n++")->!(0''*"++c++"'="++n++"))->((!(0''*0="++n++"))&(@"++c++".(!((0''*"++c++")="++n++")->!(0''*"++c++"'="++n++"))))"),
                                ("(!(0''*0="++n++"))&(@"++c++".(!((0''*"++c++")="++n++")->!(0''*"++c++"'="++n++")))"),
                                ("(!(0''*0="++n++"))&(@"++c++".(!((0''*"++c++")="++n++")->!(0''*"++c++"'="++n++")))->!((0''*"++c++")="++n++")"),
                                ("!((0''*"++c++")="++n++")")]
                                
    
    eq a = 
        ["@c.@b.@a.((a=b)->(a=c)->(b=c))->@b.@a.((a=b)->(a="++a++")->(b="++a++"))",
        "@b.@a.((a=b)->(a="++a++")->(b="++a++"))",
        "@b.@a.((a=b)->(a="++a++")->(b="++a++"))->@a.((a="++a++")->(a="++a++")->("++a++"="++a++"))",
        "@a.((a="++a++")->(a="++a++")->("++a++"="++a++"))",
        "@a.((a="++a++")->(a="++a++")->("++a++"="++a++"))->(("++a++"+0="++a++")->("++a++"+0="++a++")->("++a++"="++a++"))",
        "("++a++"+0="++a++")->("++a++"+0="++a++")->("++a++"="++a++")",
        "("++a++"+0="++a++")->("++a++"="++a++")",
        "@a.(a+0=a)->("++a++"+0="++a++")",
        a++"+0="++a,
        a++"="++a]
                                
    getNotNotZN s = 
        [("@a.(a*0=0)->(0''*0=0)"),
        ("0''*0=0")]++
        (secondImpl "0''*0" "0" s)++
        [("(0''*0="++s++")->(0="++s++")")]++
        (contr ("(0''*0="++s++")") ("(0="++s++")"))++
        (secondImpl "0" s "0")++
        [("@a.(a+0=a)->(0+0=0)"),
        ("0+0=0")]++
        (secondImpl "0+0" "0" "0")++
        [("(0+0=0)->(0=0)"),
        ("0=0"),
        ("(0=0)->(0="++s++")->(0=0)"),
        ("(0="++s++")->(0=0)"),
        ("((0="++s++")->(0=0))->((0="++s++")->(0=0)->("++s++"=0))->((0="++s++")->("++s++"=0))"),
        ("((0="++s++")->(0=0)->("++s++"=0))->((0="++s++")->("++s++"=0))"),
        ("(0="++s++")->("++s++"=0)")]++
        (contr ("(0="++s++")") ("("++s++"=0)"))++
        [("@a.!(a'=0)->!("++s++"=0)"),
        ("!("++s++"=0)"),
        ("!(0="++s++")"),
        ("!(0''*0="++s++")")]
    
    gen :: String -> String -> [String]
    gen a b = 
        [(a++"->!(y'=0)->"++a),
        ("!(y'=0)->"++a),
        ("!(y'=0)->@"++b++"."++a),
        ("!(y'=0)"),
        ("@"++b++"."++a)]
    
    mor :: String -> String -> [String]
    mor a b = 
        [("@"++b++".!"++a++"->!"++a)]++
        (contr ("@"++b++".!"++a) ("!"++a))++
        (cImpl a ("!@"++b++".!"++a))++
        [("?"++b++"."++a++"->!@"++b++".!"++a)]++
        (contr ("?"++b++"."++a) ("!@"++b++".!"++a))++
        (cImpl ("@"++b++".!"++a) ("!?"++b++"."++a))
    
    contr :: String -> String -> [String]
    contr a b =
        [("("++a++"->"++b++")->("++a++"->!"++b++")->!"++a),
        ("("++a++"->!"++b++")->!"++a),
        ("!"++b++"->"++a++"->!"++b),
        ("(("++a++"->!"++b++")->!"++a++")->!"++b++"->(("++a++"->!"++b++")->!"++a++")"),
        ("!"++b++"->(("++a++"->!"++b++")->!"++a++")"),
        ("(!"++b++"->"++a++"->!"++b++")->(!"++b++"->(("++a++"->!"++b++")->!"++a++"))->(!"++b++"->!"++a++")"),
        ("(!"++b++"->(("++a++"->!"++b++")->!"++a++"))->(!"++b++"->!"++a++")"),
        ("!"++b++"->!"++a)]
    
    cImpl a b = 
        [a++"->"++a++"->"++a,
        a++"->("++a++"->"++a++")->"++a,
        "("++a++"->"++a++"->"++a++")->("++a++"->("++a++"->"++a++")->"++a++")->("++a++"->"++a++")",
        "("++a++"->("++a++"->"++a++")->"++a++")->("++a++"->"++a++")",
        a++"->"++a,
        a++"->(!"++a++"->"++a++")",
        "(!"++a++"->(!"++a++"->!"++a++"))",
        "(!"++a++"->(!"++a++"->!"++a++"))->"++a++"->(!"++a++"->(!"++a++"->!"++a++"))",
        a++"->(!"++a++"->(!"++a++"->!"++a++"))",
        "((!"++a++"->(!"++a++"->!"++a++"))->((!"++a++"->((!"++a++"->!"++a++")->!"++a++"))->(!"++a++"->!"++a++")))",
        "((!"++a++"->(!"++a++"->!"++a++"))->((!"++a++"->((!"++a++"->!"++a++")->!"++a++"))->(!"++a++"->!"++a++")))->"++a++"->((!"++a++"->(!"++a++"->!"++a++"))->((!"++a++"->((!"++a++"->!"++a++")->!"++a++"))->(!"++a++"->!"++a++")))",
        a++"->((!"++a++"->(!"++a++"->!"++a++"))->((!"++a++"->((!"++a++"->!"++a++")->!"++a++"))->(!"++a++"->!"++a++")))",
        "("++a++"->(!"++a++"->(!"++a++"->!"++a++")))->("++a++"->((!"++a++"->(!"++a++"->!"++a++"))->((!"++a++"->((!"++a++"->!"++a++")->!"++a++"))->(!"++a++"->!"++a++"))))->("++a++"->((!"++a++"->((!"++a++"->!"++a++")->!"++a++"))->(!"++a++"->!"++a++")))",
        "("++a++"->((!"++a++"->(!"++a++"->!"++a++"))->((!"++a++"->((!"++a++"->!"++a++")->!"++a++"))->(!"++a++"->!"++a++"))))->("++a++"->((!"++a++"->((!"++a++"->!"++a++")->!"++a++"))->(!"++a++"->!"++a++")))",
        a++"->((!"++a++"->((!"++a++"->!"++a++")->!"++a++"))->(!"++a++"->!"++a++"))",
        "(!"++a++"->((!"++a++"->!"++a++")->!"++a++"))",
        "(!"++a++"->((!"++a++"->!"++a++")->!"++a++"))->"++a++"->(!"++a++"->((!"++a++"->!"++a++")->!"++a++"))",
        a++"->(!"++a++"->((!"++a++"->!"++a++")->!"++a++"))",
        "("++a++"->(!"++a++"->((!"++a++"->!"++a++")->!"++a++")))->("++a++"->((!"++a++"->((!"++a++"->!"++a++")->!"++a++"))->(!"++a++"->!"++a++")))->("++a++"->!"++a++"->!"++a++")",
        "("++a++"->((!"++a++"->((!"++a++"->!"++a++")->!"++a++"))->(!"++a++"->!"++a++")))->("++a++"->!"++a++"->!"++a++")",
        a++"->(!"++a++"->!"++a++")",
        "((!"++a++"->"++a++")->((!"++a++"->!"++a++")->!!"++a++"))",
        "((!"++a++"->"++a++")->((!"++a++"->!"++a++")->!!"++a++"))->"++a++"->((!"++a++"->"++a++")->((!"++a++"->!"++a++")->!!"++a++"))",
        a++"->((!"++a++"->"++a++")->((!"++a++"->!"++a++")->!!"++a++"))",
        "("++a++"->(!"++a++"->"++a++"))->("++a++"->((!"++a++"->"++a++")->((!"++a++"->!"++a++")->!!"++a++")))->("++a++"->((!"++a++"->!"++a++")->!!"++a++"))",
        "("++a++"->((!"++a++"->"++a++")->((!"++a++"->!"++a++")->!!"++a++")))->("++a++"->((!"++a++"->!"++a++")->!!"++a++"))",
        a++"->((!"++a++"->!"++a++")->!!"++a++")",
        "("++a++"->(!"++a++"->!"++a++"))->("++a++"->((!"++a++"->!"++a++")->!!"++a++"))->("++a++"->!!"++a++")",
        "("++a++"->((!"++a++"->!"++a++")->!!"++a++"))->("++a++"->!!"++a++")",
        a++"->!!"++a,
        "(!!"++a++"->"++b++")->"++a++"->(!!"++a++"->"++b++")",
        a++"->(!!"++a++"->"++b++")",
        "("++a++"->!!"++a++")->("++a++"->(!!"++a++"->"++b++"))->("++a++"->"++b++")",
        "("++a++"->(!!"++a++"->"++b++"))->("++a++"->"++b++")",
        a++"->"++b]